<launch>
    <!-- Load the URDF and publish robot state -->
    <param name="robot_description" command="xacro '$(find hummanoid)/urdf/hum_robot.xacro'" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="false" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />


    <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.55 0 0.44 0 0 0 base_link laser_frame 30" />
    <node pkg="tf" type="static_transform_publisher" name="laser" args="0 0 0 0 0 0 laser_frame laser 30" />
    <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
    <!-- map to odom will be provided by the AMCL -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />

    <node name="serial_node" pkg="mapping_launch" type="serial_node.py" output="screen"/>

    <node name="rplidarNode" pkg="mapping_launch" type="dummy_publisher.py" output="screen"/>

    <!-- Publish: /cmd_vel -->
    <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard" output="screen">
    </node>

    <!-- Wheel Odometry Publisher -->
    <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
    <!-- Publish: /odom_data_euler, /odom_data_quat -->
    <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub">
    </node> 

    <!-- Extended Kalman Filter from robot_pose_ekf Node-->
    <!-- Subscribe: /odom, /imu_data, /vo -->
    <!-- Publish: /robot_pose_ekf/odom_combined -->
    <remap from="odom" to="odom_data_quat" />
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_link"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="false"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
    </node>

    <!-- Initial Pose and Goal Publisher -->
    <!-- Publish: /initialpose, /move_base_simple/goal -->
    <node pkg="rviz" type="rviz" name="rviz">
    </node> 

    <!-- Subscribe: /initialpose, /move_base_simple/goal -->
    <!-- Publish: /initial_2d, /goal_2d --> 
    <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
    </node> 

    <!-- Map File -->
    <arg name="map_file" default="$(find mapping_launch)/maps/hector_map.yaml"/>

    <!-- Map Server -->
    <!-- Publish: /map, /map_metadata -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />

    <!-- Add AMCL example for differential drive robots for Localization -->
    <!-- Subscribe: /scan, /tf, /initialpose, /map -->
    <!-- Publish: /amcl_pose, /particlecloud, /tf -->
    <include file="$(find amcl)/examples/amcl_diff.launch"/>

    <!-- Move Base Node -->
    <!-- Subscribe: /move_base_simple/goal -->
    <!-- Publish: /cmd_vel -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
    </node>

</launch>
