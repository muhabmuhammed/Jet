<launch>

    <!-- Load the URDF and publish robot state -->
    <param name="robot_description" command="xacro '$(find hummanoid)/urdf/hum_robot.xacro'" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="false" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

    <!-- Static Transforms -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 1 map odom 30" />
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.32 0 0.44 0 0 0 base_link laser_frame 30" />
    <node pkg="tf" type="static_transform_publisher" name="laser" args="0 0 0 0 0 0 laser_frame laser 30" />
    <!-- <node pkg="tf" type="static_transform_publisher" name="hector_to_laser" args="0 0 0 0 0 0 map scanmatcher_frame 30" /> -->
    <node pkg="tf" type="static_transform_publisher" name="hector_to_urdf" args="0 0 0 0 0 0 base_link scanmatcher_frame 30" />


    <!-- Wheel Encoder Tick Publisher Using Arduino -->  
    <!-- motor_controller_diff_drive.ino is the Arduino sketch -->
    <!-- Subscribe: /turtle1/cmd_vel -->
    <!-- Publish: /right_ticks, /left_ticks -->
    <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyUSB1"/>
    <param name="baud" value="57600"/>
    </node>
    
    <!-- Teleop Keyboard -->
    <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard" output="screen" />

    <!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
    <!-- Used for obstacle avoidance and can be used for mapping -->
    <!-- Publish: /scan -->
    <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
    <param name="serial_baudrate"     type="int"    value="115200"/>
    <param name="frame_id"            type="string" value="laser"/>
    <param name="inverted"            type="bool"   value="false"/>
    <param name="angle_compensate"    type="bool"   value="true"/>
    </node>

    <!-- Wheel Odometry Publisher -->
    <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
    <!-- Publish: /odom_data_euler, /odom_data_quat -->
    <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub">
    </node> 

    <!-- Extended Kalman Filter from robot_pose_ekf Node-->
    <!-- Subscribe: /odom, /imu_data, /vo -->
    <!-- Publish: /robot_pose_ekf/odom_combined -->
    <remap from="odom" to="odom_data_quat" />
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_link"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="false"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
    </node>

    <!-- Hector-Slam args -->
    <arg name="geotiff_map_file_path" default="$(find hector_geotiff)/maps"/>

    <param name="/use_sim_time" value="false"/>

    <node pkg="rviz" type="rviz" name="rviz"
    args="-d $(find hector_slam_launch)/rviz_cfg/mapping_demo.rviz"/>

    <include file="$(find hector_mapping)/launch/mapping_default.launch"/>

    <include file="$(find hector_geotiff_launch)/launch/geotiff_mapper.launch">
    <arg name="trajectory_source_frame_name" value="scanmatcher_frame"/>
    <arg name="map_file_path" value="$(arg geotiff_map_file_path)"/>
    </include>

</launch>
